{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { portfolioData } from \"utils\";\nconst initialState = {\n  theme: \"light\",\n  defaultPortfolioData: portfolioData\n};\nconst userSlice = createSlice({\n  initialState,\n  name: \"user\",\n  reducers: {\n    toggleTheme: (state, action) => {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        theme: action.payload.theme === \"dark\" ? \"light\" : \"dark\"\n      });\n    }\n  }\n});\nexport const {\n  toggleTheme\n} = userSlice.actions;\nconst userReducer = userSlice.reducer;\nexport default userReducer;","map":null,"metadata":{},"sourceType":"module"}